{"version":3,"sources":["components/FormikForm.js","App.js","serviceWorker.js","index.js"],"names":["validationSchema","Yup","shape","firstname","required","min","lastname","phonenumber","matches","email","url","company","MyCheckBox","label","props","useField","field","Input","type","Label","MyTextInput","example","meta","FormGroup","invalid","error","valid","value","FormFeedback","FormText","MyRadioButton","check","FormikForm","initialValues","contactpreference","IsSure","cookies","onSubmit","data","setSubmitting","resetForm","console","log","setTimeout","alert","values","isSubmitting","errors","touched","setFieldValue","Row","Col","md","name","placeholder","for","checked","includes","Button","color","disabled","JSON","stringify","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.11b1dbe5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  FormGroup,\n  Label,\n  Input,\n  FormFeedback,\n  FormText,\n  Row,\n  Col,\n  Button,\n} from \"reactstrap\";\n\nconst phoneRegExp = /^5(0[5-7]|[3-5]\\d)\\d{7}$/gm;\n\nconst validationSchema = Yup.object().shape({\n  firstname: Yup.string().required(\"Firstname is a required field\").min(2),\n  lastname: Yup.string().required(\"Lastname is a required field\").min(2),\n  phonenumber: Yup.string()\n    .matches(phoneRegExp, \"Phone number is not valid\")\n    .required(\"Phone Number is a required field\"),\n  email: Yup.string().required(\"Email is a required field\").email(),\n  url: Yup.string().required(\"Url is a required field\").url(),\n  company: Yup.string().required(\"Company is a required field\").min(3),\n});\n\nconst MyCheckBox = ({ label, ...props }) => {\n  const [field] = useField(props);\n  return (\n    <div>\n      <Input type=\"checkbox\" {...field} {...props} />\n      <Label>{label}</Label>\n    </div>\n  );\n};\n\nconst MyTextInput = ({ label, example, ...props }) => {\n  const [field, meta] = useField(props);\n  return (\n    <FormGroup>\n      <Label>{label}</Label>\n      <Input\n        {...field}\n        {...props}\n        invalid={meta.error}\n        valid={meta.error ? false : field.value}\n      />\n      <FormFeedback\n        invalid={meta.error}\n        valid={meta.error ? false : field.value}\n      >\n        {meta.error}\n      </FormFeedback>\n      {example ? <FormText>{example}</FormText> : null}\n    </FormGroup>\n  );\n};\n\nconst MyRadioButton = ({ label, ...props }) => {\n  const [field] = useField(props);\n  return (\n    <FormGroup check>\n      <Label check>\n        <Input type=\"radio\" {...field} {...props} /> {label}\n      </Label>\n    </FormGroup>\n  );\n};\n\nconst FormikForm = () => {\n  return (\n    <Formik\n      initialValues={{\n        firstname: \"\",\n        lastname: \"\",\n        phonenumber: \"\",\n        email: \"\",\n        url: \"\",\n        company: \"\",\n        contactpreference: \"AM\",\n        IsSure: false,\n        cookies: [],\n      }}\n      validationSchema={validationSchema}\n      onSubmit={(data, { setSubmitting, resetForm }) => {\n        setSubmitting(true);\n\n        console.log(data);\n        setTimeout(() => {\n          console.log(\"sending form\");\n          setSubmitting(false);\n          resetForm();\n          alert(\"Form successfully submitted And Reseted Form\");\n        }, 3000);\n      }}\n    >\n      {({\n        values,\n        errors,\n        touched,\n        isSubmitting,\n        setFieldValue,\n        resetForm,\n        /* and other goodies */\n      }) => (\n        <Form>\n          <h2>Contact Us</h2>\n          <Row>\n            <Col md=\"6\">\n              <MyTextInput\n                name=\"firstname\"\n                type=\"text\"\n                label=\"First Name :\"\n                placeholder=\"Enter First Name\"\n              />\n            </Col>\n            <Col md=\"6\">\n              <MyTextInput\n                name=\"lastname\"\n                type=\"text\"\n                label=\"Last Name :\"\n                placeholder=\"Enter Last Name\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col md=\"6\">\n              <MyTextInput\n                name=\"company\"\n                type=\"text\"\n                label=\"Company :\"\n                placeholder=\"Enter Company\"\n              />\n            </Col>\n            <Col md=\"6\">\n              <MyTextInput\n                name=\"phonenumber\"\n                type=\"text\"\n                label=\"Phone Number :\"\n                placeholder=\"Enter Phone Number\"\n                example=\"Example : XXX1232123\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col md=\"6\">\n              <MyTextInput\n                name=\"email\"\n                type=\"email\"\n                label=\"Email Adress :\"\n                placeholder=\"Enter Email Adress\"\n              />\n            </Col>\n            <Col md=\"6\">\n              <MyTextInput\n                name=\"url\"\n                type=\"url\"\n                label=\"Your Website :\"\n                placeholder=\"Enter Website\"\n                example=\"Example : https://...\"\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col md=\"6\">\n              <Col md=\"12\">\n                <Label for=\"contactpreference\">\n                  When is the best time of day to reach you?\n                </Label>\n              </Col>\n              <Col md=\"12\">\n                <MyRadioButton\n                  name=\"contactpreference\"\n                  value=\"AM\"\n                  label=\"Morning\"\n                  checked={values.contactpreference === \"AM\"}\n                />\n              </Col>\n              <Col md=\"12\">\n                <MyRadioButton\n                  name=\"contactpreference\"\n                  value=\"PM\"\n                  label=\"Evening\"\n                  checked={values.contactpreference === \"PM\"}\n                />\n              </Col>\n            </Col>\n            <Col md=\"6\">\n              Cookies you love?\n              <hr />\n              <Row>\n                <Col>\n                  <MyCheckBox\n                    name=\"cookies\"\n                    value=\"chocolate\"\n                    label=\"Chocolate\"\n                    checked={values.cookies.includes(\"chocolate\")}\n                  />\n                </Col>\n                <Col>\n                  <MyCheckBox\n                    name=\"cookies\"\n                    value=\"strawberry\"\n                    label=\"Strawberry\"\n                    checked={values.cookies.includes(\"strawberry\")}\n                  />\n                </Col>\n                <Col>\n                  <MyCheckBox\n                    name=\"cookies\"\n                    value=\"sugar\"\n                    label=\"Sugar\"\n                    checked={values.cookies.includes(\"sugar\")}\n                  />\n                </Col>\n              </Row>\n            </Col>\n          </Row>\n          <Col>\n            <label for=\"newsletter\">\n              Would you like to recieve our email newsletter?\n            </label>\n            <MyCheckBox name=\"IsSure\" label={\"IsSure ?\"} />\n          </Col>\n          <Button color=\"success\" disabled={isSubmitting} type=\"submit\">\n            Submit\n          </Button>\n          <pre>{JSON.stringify(values, null, 2)}</pre>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default FormikForm;\n","import React from \"react\";\nimport \"./App.css\";\nimport FormikForm from \"./components/FormikForm\";\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <FormikForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}